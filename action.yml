name: 'Auto-PyPI-GitHubPackage-Docker-Release'
description: 'A GitHub Action for releasing Python packages in PyPI and Docker images in Docker Hub and GitHub Docker Packages.'
author: 'Md. Musfiqur Rahaman'

branding:
  icon: 'chevrons-right'
  color: 'white'
  
inputs:
  version:
    description: 'Version number for the release.'
    required: true
  pypi_token:
    description: 'PyPI API token'
    required: true
  dockerhub_username:
    description: 'DockerHub username'
    required: true
  dockerhub_password:
    description: 'DockerHub password'
    required: true
  docker_image_name:
    description: 'Docker Image Name'
    required: true
  github_token:
    description: 'GitHub token'
    required: true
  the_github_username:
    description: 'GitHub username'
    required: true
  the_github_repo_name:
    description: 'GitHub Repository Name'
    required: true
    
outputs:
  version:
    description: 'The version of the release.'
    
runs:
  using: 'composite'
  steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip3 install --upgrade pip
        pip3 install -r requirements.txt
      shell: bash

    - name: Get the current version
      id: current-version
      run: echo "version=$(python setup.py --version)" >> $GITHUB_ENV
      shell: bash

    - name: Check if version exists on PyPI
      id: check-version
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://pypi.org/project/data-preprocessors/${{ env.version }}/)
        if [ $response -eq 200 ]; then
          echo "Version already exists on PyPI. Incrementing version..."
          new_version=$(python -c "import re; v='${{ env.version }}'; parts = v.split('.'); parts[-1] = str(int(parts[-1]) + 1); print('.'.join(parts))")
          echo "new_version=$new_version" >> $GITHUB_ENV
        else
          echo "Version does not exist. Using provided version."
          echo "new_version=${{ env.version }}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Update version in setup.py if necessary
      run: |
        current_version=$(grep -oP "version='\K[^']+" setup.py)
        if [[ "${{ env.new_version }}" != "${{ current_version }}" ]]; then
          sed -i "s/version='${{ current_version }}'/version='${{ env.new_version }}'/g" setup.py
        fi
      shell: bash

    - name: Check commit message
      run: |
        if [[ $(git log -1 --pretty=%B) != "Release v${{ env.new_version }}" ]]; then
          echo "Commit message does not match the release pattern."
          exit 1
        fi
      shell: bash

    - name: Setup PyPI Package using poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry build
        poetry config pypi-token.pypi ${{ inputs.pypi_token }}
        poetry publish
      shell: bash

    - name: Create a new release
      uses: CupOfTea696/gh-action-auto-release@v1.0.2
      with:
        title: "Release ${{ env.new_version }}"
        tag: "v${{ env.new_version }}"
        draft: false
        regex: "/^Release #${{ env.new_version }}$/i"
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Upload to GitHub Packages using Docker
      run: |
        # Building the Docker image
        docker build -t data-preprocessors .

        # Login to Docker Hub
        echo ${{ inputs.dockerhub_password }} | docker login -u ${{ inputs.dockerhub_username }} --password-stdin

        # Login to GitHub Docker Packages
        echo ${{ inputs.github_token }} | docker login docker.pkg.github.com -u ${{ inputs.the_github_username }} --password-stdin

        # Tag the image for Docker Hub
        docker tag data-preprocessors ${{ inputs.dockerhub_username }}//${{ inputs.docker_image_name }}:v${{ env.new_version }}

        # Tag the image for GitHub Docker Packages
        docker tag data-preprocessors docker.pkg.github.com/${{ inputs.the_github_username }}/${{ inputs.the_github_repo_name }}/${{ inputs.docker_image_name }}:v${{ env.new_version }}

        # Push the image to Docker Hub
        docker push ${{ inputs.dockerhub_username }}//${{ inputs.docker_image_name }}:v${{ env.new_version }}

        # Push the image to GitHub Docker Packages
        docker push docker.pkg.github.com/${{ inputs.github_username }}/${{ inputs.the_github_repo_name }}//${{ inputs.docker_image_name }}:v${{ env.new_version }}
      shell: bash
